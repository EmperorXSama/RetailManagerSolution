@page "/Products"
@using Protal.Library
@inject IHttpClientFactory ClientFactory
@inject IConfiguration _configuration
@inject  Blazored.LocalStorage.ILocalStorageService _localStorageService



@if (products is not null || products.Count > 0)
{
    <div class="container mx-auto grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 pt-6 gap-8">
    @foreach (var prod in products)
    {
        <div class="rounded border-gray-300 dark:border-gray-700 ">
            <div class="max-w-xs bg-white shadow-lg rounded-lg overflow-hidden my-10  justify-between">
                <div class="px-4 py-2">
                    <h1 class="text-gray-900 font-bold text-3xl uppercase">@prod.ProductName</h1>
                    <p class="text-gray-600 text-sm mt-1 ">@prod.Description</p>
                </div>
                @if (String.IsNullOrWhiteSpace(prod.ProductImage))
                {
                    <img class="h-56 w-full object-cover mt-2" src="https://dummyimage.com/600x400/000/ffffff&text=No+Content" alt="NIKE AIR">
                }
                else
                {
                    <img class="h-56 w-full object-cover mt-2" src="@($"{api}{prod.ProductImage}")" alt="NIKE AIR">
                }
                
                <div class="flex items-center justify-between px-4 py-2 bg-gray-900">
                    <h1 class="text-gray-200 font-bold text-xl">$@prod.RetailPrice</h1>
                    <button class="px-3 py-1 bg-gray-200 text-sm text-gray-900 font-semibold rounded">Add to card</button>
                </div>
            </div>
        </div>
    }
    </div>
}
else
{
    <h1>Loading...</h1>
}




@code
{
    List<ProductsModel> products = new List<ProductsModel>();
    string api;
    private const string ProductListName = "ProductsList";
    private const string ProductCashDate = "ProductsCashDate";
    protected override async  Task OnInitializedAsync()
    {
        api = _configuration.GetValue<string>("api");
        try
        {
            products = await _localStorageService.GetItemAsync<List<ProductsModel>>(ProductListName);
            DateTime? cacheDate = await _localStorageService.GetItemAsync<DateTime>(ProductCashDate);
            double totalMin = 0;
            
            if (cacheDate is not null)
            {
                totalMin = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
            }
            
            if (products is null || cacheDate is null || totalMin > 10)
            {
                try
                {
                    var client = ClientFactory.CreateClient(ApiEndPoints.ApiClientName);
                    products = await client.GetFromJsonAsync<List<ProductsModel>>(ApiEndPoints.GetProductEndPoint);
                    await _localStorageService.SetItemAsync(ProductListName, products);
                    await _localStorageService.SetItemAsync(ProductCashDate, DateTime.UtcNow);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    throw;
                }
                
            }
           
        }
        
        catch (AccessViolationException e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    }
